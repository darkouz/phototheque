<?php

namespace App\Controller;

use App\Entity\Photo;
use App\Entity\Tag;
use App\Form\PhotoType;
use App\Service\FileUploader;
use App\Service\ThumbnailGetter;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\File\File;

class AdminController extends Controller
{
    /**
     * @Route("/admin", name="admin")
     */
    public function adminIndexAction()
    {

        $userRepo = $this->getDoctrine()->getRepository("App:User");
        $userList = $userRepo->findAll();
        $userCount = count($userList);

        $photoRepo = $this->getDoctrine()->getRepository("App:Photo");
        $photoList = $photoRepo->findAll();
        $photoCount = count($photoList);

        $tagRepo = $this->getDoctrine()->getRepository("App:Tag");
        $tagList = $tagRepo->findAll();
        $tagCount = count($tagList);
        return $this->render('admin/admin-index.html.twig', [

            "userCount" => $userCount,
            "photoCount" => $photoCount,
            "tagCount" => $tagCount

        ]);
    }

    /**
     * @Route("/admin-users",name="admin-users")
     */
    public function adminUsersAction()
    {

        $userRepo = $this->getDoctrine()->getRepository("App:User");
        $userList = $userRepo->findAll();
        return $this->render('admin/admin-users.html.twig', [
            "userList" => $userList,
        ]);

    }

    /**
     * @Route("/admin-photos",name="admin-photos")
     */
    public function adminPhotosAction(Request $request, FileUploader $fileUploader,ThumbnailGetter $thumbnailGetter)
    {

        $userRepo = $this->getDoctrine()->getRepository("App:Photo");
        $photoList = $userRepo->findAll();

        $photo = new Photo();
        $form = $this->createForm(PhotoType::class, $photo);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $em = $this->getDoctrine()->getManager();

            $file = $photo->getPath();
            $fileName = $fileUploader->upload($file);
            $filePath = "uploads/photo/" . $fileName;
            $photo->setPath($filePath);
            $filePath = $fileUploader->getTargetDirectory() . "/" . $fileName;

            $thumbnail = $thumbnailGetter->getThumbnail($filePath,$fileName);
            dump($thumbnail);

            $photo->setThumbnail($thumbnail);



            $exif = exif_read_data($filePath, 'EXIF');
            $createdAt = $exif['DateTimeOriginal'];
            $createdAt = \DateTime::createFromFormat('Y:m:d H:i:s', $createdAt);
            $photo->setCreatedAt($createdAt);

            $tags = $form->getViewData()->getTags();
            $name = "";
            foreach ($tags as $key =>$tag){
                if($key < 1)
                    $name = $tag->getName();
            }
            $name .="-".$createdAt->format('Y-m-d-H:i:s');
            //dump($name);

            $photo->setName($name);

            $em->persist($photo);
            $em->flush();

            //return $this->redirectToRoute("admin-photos");
        }
        return $this->render('admin/admin-photo.html.twig', [

            "photoForm" => $form->createView(),
            "photoList"=>$photoList

        ]);

    }

    /**
     * @Route("/admin-tag",name="admin-tag")
     */
    public function adminTagAction(Request $request)
    {

        $tagRepo = $this->getDoctrine()->getRepository("App:Tag");
        $tagList = $tagRepo->findAll();

        $tag = new Tag();
        $form = $this->createForm("App\Form\TagType", $tag);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $em = $this->getDoctrine()->getManager();
            $em->persist($tag);
            $em->flush();

            return $this->redirectToRoute("admin-tag");
        }


        return $this->render('admin/admin-tag.html.twig', [

            "tagForm" => $form->createView(),
            "tagList" => $tagList
        ]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
